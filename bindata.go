// Code generated by go-bindata.
// sources:
// static/index.html
// static/js.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x6f\xdc\x20\x10\xbd\xf3\x2b\xa6\x54\xbd\xad\xcd\x56\xe9\xa1\x72\xb0\xa5\x7e\x49\x3d\xb5\x3d\xf4\xd2\x23\x31\x63\x33\x5b\x1b\x2c\x98\x75\xb2\xaa\xf2\xdf\x2b\xf0\x36\xd9\x6a\xa5\x5c\x60\x86\x79\xef\x0d\xf3\x40\xbf\xfa\xfc\xfd\xd3\xcf\x5f\x3f\xbe\x80\xe3\x79\xea\x84\xde\x36\x00\xed\xd0\xd8\x1c\x00\xe8\x19\xd9\x40\xef\x4c\x4c\xc8\xad\x3c\xf2\x50\xbd\x97\xa0\x2e\x8b\xde\xcc\xd8\xca\x95\xf0\x7e\x09\x91\x25\xf4\xc1\x33\x7a\x6e\xe5\x3d\x59\x76\xad\xc5\x95\x7a\xac\x4a\xf2\xcc\x64\xe2\x09\xbb\x8f\x93\xd1\x6a\x0b\x45\xee\xab\xfe\x35\xd6\x77\xc1\x9e\xce\xd0\xc4\xa7\x52\x1f\x42\x9c\xe1\x8f\x00\x18\x82\xe7\x6a\x30\x33\x4d\xa7\x06\xe4\x57\x9c\x56\x64\xea\x0d\x7c\xc3\x23\xca\x1d\x3c\x1d\xec\xe0\x43\x24\x33\xed\x20\x19\x9f\xaa\x84\x91\x86\x5b\xf1\x28\x44\x1e\x73\x07\xb9\x43\x91\x73\x48\xa3\xe3\x06\xde\xee\xf7\x6f\x6e\x05\xc0\x62\xac\x25\x3f\x36\xb0\xcf\xd9\x6c\xe2\x48\xbe\x24\x8f\x42\xa4\x75\x7c\xba\x42\x66\x2c\x0f\xff\x89\x03\x94\x31\x9f\xb5\xae\xb4\x43\x22\xa6\xe0\x1b\x30\x77\x29\x4c\x47\xc6\x22\x5b\x9b\xd8\x03\xe3\x03\xbf\x2c\x9e\x11\x95\xf1\xbd\x0b\xb1\x81\x99\xac\x9d\x2e\xe8\x8b\x61\x57\xe8\x89\x63\xf8\x8d\x0d\xbc\x1e\x86\x6d\xde\xe2\xa2\x3a\xdb\xb8\x59\xba\x8e\x9d\x56\x79\x3d\x57\x53\x1f\x69\x61\x48\xb1\x6f\xa5\x63\x5e\x52\xa3\x94\xbd\x39\xa4\x3a\xc4\x51\xd9\x9b\x7a\x7d\x57\xcf\xe4\xeb\x43\x92\x99\x57\xc0\xdd\x35\xb3\x56\x87\x74\x85\xd1\x6a\x7b\x4b\xad\xb6\xef\xf5\x37\x00\x00\xff\xff\x95\x40\xcf\x52\x76\x02\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 630, mode: os.FileMode(420), modTime: time.Unix(1492878234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\xcc\x61\x01\x92\x88\x4a\x3b\x09\x7a\x31\xaa\x16\xc5\xa2\x40\x51\xb4\x4d\xd1\x2d\xb0\x87\x20\xc0\x32\xe2\x58\x62\x57\x22\x05\x92\xb2\xbb\xc8\xea\xbf\x17\x33\x94\x13\x3b\x41\x4f\x3d\xd9\xf3\xf5\xde\xf0\xcd\xb3\x0f\x26\x82\xbd\x85\x06\x8e\xce\xdb\x70\xd4\xf6\xb6\xaa\xda\xe0\x53\x86\x14\xda\xcf\x98\xff\x88\x21\x87\x97\xf2\x10\x5a\x93\x5d\xf0\x7a\xa2\x7c\x1b\x06\x68\x9a\x06\x44\x9f\xf3\x94\x76\x02\x7e\x00\x71\x4c\x49\xc0\x8e\x3e\xc5\x05\x10\x34\xe0\xf1\x78\xc2\xf9\x88\x8f\x1f\x38\x2d\x3f\xbd\x7b\x3a\x63\x5a\x76\x9b\xcd\xbb\xa7\xd7\x64\x7d\x48\x79\xd9\x1c\xd3\x27\x55\x55\x9b\x0d\xfc\xea\x52\x46\x0f\xfb\x10\x61\xc4\x94\x4c\x87\x69\xa5\x72\x19\xc7\x04\x0d\xdc\x3f\x54\x05\x54\x1b\x6b\x7f\x3a\xa0\xcf\x65\x06\xa3\x14\xeb\x88\xa8\x61\x3f\xfb\x96\xf0\x41\x22\xb5\x28\x78\xaa\x00\x5e\x80\xa0\x81\x5f\x3e\xdc\xfd\xae\x27\x13\x13\x96\x16\x6d\x4d\x36\xaa\x82\x42\xa4\xa7\x39\xf5\x92\xbe\xaa\xe7\x41\xd2\xaa\x14\x23\xda\xb9\x45\x29\x53\x0d\x4e\x41\xf3\x3d\xa3\x03\xa4\x7b\x47\xe2\xfd\x8d\x6d\x7e\x80\x06\xe4\x45\xfc\xf5\x2b\x6c\x15\x5c\xc1\x35\xb7\x46\xcc\x73\xf4\x90\x2a\x80\xa5\x86\xa7\x85\x58\x22\x7a\x8b\x51\x72\xfd\xee\x91\xa6\xf4\x67\xfc\x92\x64\x50\x3a\x85\x98\xa5\x34\x35\x3c\x32\x9d\x61\xfd\x06\x7c\x1f\xc6\xc9\x44\x94\x8f\x4a\xe9\xd1\x4c\xd2\x51\x51\x96\x65\x00\x0e\x66\x98\x71\x07\xe1\xde\x3d\xd4\x6b\xca\x9b\x11\x77\xe0\x38\x5a\x14\x91\xaa\x6a\x29\xca\x93\x3b\xc8\x31\x47\x67\x73\xff\xe2\x0a\xe7\x3d\xc6\x8f\x94\xe3\x6a\x8f\xae\xeb\xf3\xab\xf2\xcf\x9c\xe4\x7a\x34\xd6\xcd\x74\xa6\xdf\x4c\xee\xf5\xe8\xbc\x64\xbc\x7a\x1d\x54\xb0\x81\x1b\xf8\x06\xae\xb7\x85\xac\x0d\x43\x88\xd0\x80\xbd\xd5\x89\x1e\x74\x17\xad\xf3\x66\x90\x1c\xf7\x38\xe2\x7b\x93\xb1\x0b\xf1\xcb\xcd\xb6\x55\x65\x24\x1d\xba\x75\x00\x07\x6c\xb3\x14\xe9\xd0\x89\xb5\x46\x95\x74\xe8\x2a\x00\x6d\xa6\x09\xbd\x95\x82\x6a\x14\xe6\x1c\xa5\xc8\xd1\xf8\xb4\x0f\x71\x14\x35\x94\x60\x30\x19\xa5\x80\xab\xf5\xd9\xb4\xdd\x15\x88\x9a\x32\xeb\x53\xd7\x94\x3a\x71\x4c\x0e\x99\x9f\x50\x27\x87\x92\xe1\x59\x6a\x69\x49\x7e\x5b\x02\x4e\xbf\x39\x1b\xe9\xff\xfa\x76\x9c\x54\x27\x74\xc3\xe2\x17\x78\x13\xdb\x02\x1f\xe6\x8c\xf1\x4f\x96\x56\x16\x85\x39\xcd\xe2\xaf\xe9\xff\xd6\xfb\x7a\xab\xaa\xea\xf9\xf7\x10\x41\xb2\xd1\xd9\xb2\x6e\x5f\x22\x3d\xa0\xef\x72\x0f\xdf\xc1\x8d\x5a\xad\x59\x55\x64\xa0\x08\x26\xb6\xd0\x40\xb7\xaa\xfd\xe3\x30\x48\x41\x7b\x09\xc5\xbf\x17\x49\x0a\x30\x9e\xa2\x01\x13\x5b\xb6\x96\x46\x9f\x31\xf2\xee\x6f\x4e\xf1\x7c\x8c\x76\x30\x29\xd1\x21\x18\xee\xb2\x95\x64\xb8\xec\xb6\xa2\x66\x71\x2e\x92\x7b\x37\x0c\xa2\x06\xd6\x9d\xad\x24\x2d\xaf\xf5\x2c\x29\xaf\xa4\xf1\x1f\x97\xa5\xd2\x11\xc7\x70\xa0\x83\x9d\x6f\x7a\x72\xd1\x39\x23\x3b\xc3\x91\x5c\xa7\x27\xd8\x39\xf2\xdf\x95\xfc\x76\xbb\xfd\xff\x6b\x2d\xe5\xd6\xd9\x8d\x18\xe6\x7c\x76\x1b\xfe\x03\x38\x3f\x50\x3b\xa0\x89\x7f\x95\x3e\xb9\xf6\x13\xd5\xfa\x95\xec\x8e\xf9\x54\x97\x6c\xb2\x58\xc6\x6b\xe0\x55\x97\xea\xdf\x00\x00\x00\xff\xff\x4b\xd7\xf1\xd9\x06\x06\x00\x00")

func staticJsJsBytes() ([]byte, error) {
	return bindataRead(
		_staticJsJs,
		"static/js.js",
	)
}

func staticJsJs() (*asset, error) {
	bytes, err := staticJsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/js.js", size: 1542, mode: os.FileMode(420), modTime: time.Unix(1492889448, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/js.js": staticJsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"js.js": &bintree{staticJsJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

